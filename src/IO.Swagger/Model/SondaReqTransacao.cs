/* 
 * Saque e Pague Sonda
 *
 * Modelo de API para o serviço de sonda da Saque e Pague. Parceiro pode requisitar o último estado de uma transação (cancelada, confirmada ou pendente) através das chamadas desta API. Caso não encontre a transação, o serviço retorna o estado pendente.
 *
 * OpenAPI spec version: 1.1.1-sw2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Objeto de requisição que contem informações da transação sondada e procura o último estado da mesma por um período retroativo de 7 dias.
    /// </summary>
    [DataContract]
    public partial class SondaReqTransacao :  IEquatable<SondaReqTransacao>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SondaReqTransacao" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SondaReqTransacao() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SondaReqTransacao" /> class.
        /// </summary>
        /// <param name="dataLocal">Data máxima da transação desejada (yyyy-mm-dd) para procurar o NSU em até 7 dias antes desta data/horário. Obs. Campo será tirado de versões futuras, mas ainda necessário e mantido por retro-compatibilidade. (required).</param>
        /// <param name="horaLocal">Hora máxima da transação desejada (hh-mm-ss) para procurar o NSU em até 7 dias antes desta data/horário. Obs. Campo será tirado de versões futuras, mas ainda necessário e mantido por retro-compatibilidade. (required).</param>
        /// <param name="nsuSonda">NSU da transação de sonda. Necessário para controle interno e rastreabilidade das requisições. (required).</param>
        /// <param name="nsuTransacao">NSU da transação desejada. Gerado pelo sistema da SEP. Para casos de teste usar até 10 para retorno cancelado, até 20 para estado confirmado e o resto pendente. (required).</param>
        public SondaReqTransacao(string dataLocal = default(string), string horaLocal = default(string), long? nsuSonda = default(long?), long? nsuTransacao = default(long?))
        {
            // to ensure "dataLocal" is required (not null)
            if (dataLocal == null)
            {
                throw new InvalidDataException("dataLocal is a required property for SondaReqTransacao and cannot be null");
            }
            else
            {
                this.DataLocal = dataLocal;
            }
            // to ensure "horaLocal" is required (not null)
            if (horaLocal == null)
            {
                throw new InvalidDataException("horaLocal is a required property for SondaReqTransacao and cannot be null");
            }
            else
            {
                this.HoraLocal = horaLocal;
            }
            // to ensure "nsuSonda" is required (not null)
            if (nsuSonda == null)
            {
                throw new InvalidDataException("nsuSonda is a required property for SondaReqTransacao and cannot be null");
            }
            else
            {
                this.NsuSonda = nsuSonda;
            }
            // to ensure "nsuTransacao" is required (not null)
            if (nsuTransacao == null)
            {
                throw new InvalidDataException("nsuTransacao is a required property for SondaReqTransacao and cannot be null");
            }
            else
            {
                this.NsuTransacao = nsuTransacao;
            }
        }
        
        /// <summary>
        /// Data máxima da transação desejada (yyyy-mm-dd) para procurar o NSU em até 7 dias antes desta data/horário. Obs. Campo será tirado de versões futuras, mas ainda necessário e mantido por retro-compatibilidade.
        /// </summary>
        /// <value>Data máxima da transação desejada (yyyy-mm-dd) para procurar o NSU em até 7 dias antes desta data/horário. Obs. Campo será tirado de versões futuras, mas ainda necessário e mantido por retro-compatibilidade.</value>
        [DataMember(Name="dataLocal", EmitDefaultValue=false)]
        public string DataLocal { get; set; }

        /// <summary>
        /// Hora máxima da transação desejada (hh-mm-ss) para procurar o NSU em até 7 dias antes desta data/horário. Obs. Campo será tirado de versões futuras, mas ainda necessário e mantido por retro-compatibilidade.
        /// </summary>
        /// <value>Hora máxima da transação desejada (hh-mm-ss) para procurar o NSU em até 7 dias antes desta data/horário. Obs. Campo será tirado de versões futuras, mas ainda necessário e mantido por retro-compatibilidade.</value>
        [DataMember(Name="horaLocal", EmitDefaultValue=false)]
        public string HoraLocal { get; set; }

        /// <summary>
        /// NSU da transação de sonda. Necessário para controle interno e rastreabilidade das requisições.
        /// </summary>
        /// <value>NSU da transação de sonda. Necessário para controle interno e rastreabilidade das requisições.</value>
        [DataMember(Name="nsuSonda", EmitDefaultValue=false)]
        public long? NsuSonda { get; set; }

        /// <summary>
        /// NSU da transação desejada. Gerado pelo sistema da SEP. Para casos de teste usar até 10 para retorno cancelado, até 20 para estado confirmado e o resto pendente.
        /// </summary>
        /// <value>NSU da transação desejada. Gerado pelo sistema da SEP. Para casos de teste usar até 10 para retorno cancelado, até 20 para estado confirmado e o resto pendente.</value>
        [DataMember(Name="nsuTransacao", EmitDefaultValue=false)]
        public long? NsuTransacao { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SondaReqTransacao {\n");
            sb.Append("  DataLocal: ").Append(DataLocal).Append("\n");
            sb.Append("  HoraLocal: ").Append(HoraLocal).Append("\n");
            sb.Append("  NsuSonda: ").Append(NsuSonda).Append("\n");
            sb.Append("  NsuTransacao: ").Append(NsuTransacao).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SondaReqTransacao);
        }

        /// <summary>
        /// Returns true if SondaReqTransacao instances are equal
        /// </summary>
        /// <param name="input">Instance of SondaReqTransacao to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SondaReqTransacao input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DataLocal == input.DataLocal ||
                    (this.DataLocal != null &&
                    this.DataLocal.Equals(input.DataLocal))
                ) && 
                (
                    this.HoraLocal == input.HoraLocal ||
                    (this.HoraLocal != null &&
                    this.HoraLocal.Equals(input.HoraLocal))
                ) && 
                (
                    this.NsuSonda == input.NsuSonda ||
                    (this.NsuSonda != null &&
                    this.NsuSonda.Equals(input.NsuSonda))
                ) && 
                (
                    this.NsuTransacao == input.NsuTransacao ||
                    (this.NsuTransacao != null &&
                    this.NsuTransacao.Equals(input.NsuTransacao))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DataLocal != null)
                    hashCode = hashCode * 59 + this.DataLocal.GetHashCode();
                if (this.HoraLocal != null)
                    hashCode = hashCode * 59 + this.HoraLocal.GetHashCode();
                if (this.NsuSonda != null)
                    hashCode = hashCode * 59 + this.NsuSonda.GetHashCode();
                if (this.NsuTransacao != null)
                    hashCode = hashCode * 59 + this.NsuTransacao.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DataLocal (string) pattern
            Regex regexDataLocal = new Regex(@"^\\d{4}\\-\\d{2}\\-\\d{2}$", RegexOptions.CultureInvariant);
            if (false == regexDataLocal.Match(this.DataLocal).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DataLocal, must match a pattern of " + regexDataLocal, new [] { "DataLocal" });
            }

            // HoraLocal (string) pattern
            Regex regexHoraLocal = new Regex(@"^\\d{2}\\:\\d{2}\\:\\d{2}$", RegexOptions.CultureInvariant);
            if (false == regexHoraLocal.Match(this.HoraLocal).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for HoraLocal, must match a pattern of " + regexHoraLocal, new [] { "HoraLocal" });
            }

            // NsuSonda (long?) minimum
            if(this.NsuSonda < (long?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NsuSonda, must be a value greater than or equal to 1.", new [] { "NsuSonda" });
            }

            // NsuTransacao (long?) minimum
            if(this.NsuTransacao < (long?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NsuTransacao, must be a value greater than or equal to 1.", new [] { "NsuTransacao" });
            }

            yield break;
        }
    }

}
